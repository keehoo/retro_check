import 'package:collection/collection.dart';
import 'package:hive/hive.dart';
import 'package:untitled/ext/string_ext.dart';
import 'package:untitled/local_storage/video_game.dart';
import 'package:uuid/v4.dart';

part 'generic_video_game_model.g.dart';

@HiveType(typeId: 4)
class VideoGameModel {
  @HiveField(1)
  final String title;
  @HiveField(2)
  final String? description;
  @HiveField(3)

  /// specific like nintendo switch, xbox 360, sega game gear
  final GamingPlatform? platform;
  @HiveField(4)
  final String? ean; // bar code number as string
  @HiveField(5)
  final String? imageUrl;
  @HiveField(6)
  final String? imageBase64;
  @HiveField(7)
  final String? uuid;
  @HiveField(8)
  final GamingPlatformEnum gamingPlatformEnum;
  @HiveField(9)
  final int numberOfCopiesOwned;

  VideoGameModel(
      {required this.gamingPlatformEnum,
      required this.uuid,
      required this.numberOfCopiesOwned,
      required this.title,
      required this.description,
      required this.platform,
      required this.ean,
      required this.imageUrl,
      required this.imageBase64});

  static VideoGameModel fromItems(Items item,
      {required GamingPlatform? gamingPlatform,
      required GamingPlatformEnum platformEnum}) {
    return VideoGameModel(
        title: item.title ?? "",
        numberOfCopiesOwned: 1,
        description: item.description,
        platform: gamingPlatform,
        gamingPlatformEnum: platformEnum,
        ean: item.ean,
        uuid: const UuidV4().generate(),
        imageUrl: item.images?.firstOrNull ?? "",
        imageBase64: null);
  }

  VideoGameModel copyWithBase64Image({
    String? imageBase64,
    required String? imageUrl,
  }) {
    return VideoGameModel(
      title: title,
      description: description,
      platform: platform,
      ean: ean,
      imageUrl: imageUrl ?? this.imageUrl,
      uuid: uuid,
      imageBase64: imageBase64 ?? this.imageBase64,
      gamingPlatformEnum: gamingPlatformEnum,
      numberOfCopiesOwned: numberOfCopiesOwned,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'description': description,
      'platform': platform?.name,
      'ean': ean,
      'imageUrl': imageUrl,
      'imageBase64': imageBase64,
      "gamingPlatformEnum": gamingPlatformEnum.name,
      'uuid': uuid,
      'numberOfCopiesOwned': numberOfCopiesOwned
    };
  }

  Map<String, dynamic> toAppWriteJson() {
    return {
      'title': title,
      'description': description,
      'platform': platform?.name,
      'ean': ean,
      'imageUrl': imageUrl,
      'imageBase64': "",
      "gamingPlatformEnum": gamingPlatformEnum.name,
      'uuid': uuid,
      'numberOfCopiesOwned': numberOfCopiesOwned
    };
  }

  @Deprecated("not used anywhere, autogenerated though")
  factory VideoGameModel.fromMap(Map<String, dynamic> map) {
    return VideoGameModel(
      title: map['title'] as String,
      description: map['description'] as String,
      platform: map['platform'] as GamingPlatform,
      ean: map['ean'] as String,
      imageUrl: map['imageUrl'] as String,
      imageBase64: map['imageBase64'] as String,
      uuid: map['uuid'] as String,
      gamingPlatformEnum: GamingPlatformEnum.values
          .firstWhere((e) => e.name == map["gamingPlatformEnum"]),
      numberOfCopiesOwned: map["numberOfCopiesOwned"],
    );
  }

  VideoGameModel withAdditionalCopy() {
    return _copyWith(numberOfCopiesOwned: numberOfCopiesOwned + 1);
  }

  VideoGameModel _copyWith({
    String? title,
    String? description,
    GamingPlatform? platform,
    String? ean,
    String? imageUrl,
    String? imageBase64,
    String? uuid,
    GamingPlatformEnum? gamingPlatformEnum,
    int? numberOfCopiesOwned,
  }) {
    return VideoGameModel(
      title: title ?? this.title,
      description: description ?? this.description,
      platform: platform ?? this.platform,
      ean: ean ?? this.ean,
      imageUrl: imageUrl ?? this.imageUrl,
      imageBase64: imageBase64 ?? this.imageBase64,
      uuid: uuid ?? this.uuid,
      gamingPlatformEnum: gamingPlatformEnum ?? this.gamingPlatformEnum,
      numberOfCopiesOwned: numberOfCopiesOwned ?? this.numberOfCopiesOwned,
    );
  }

  VideoGameModel updatePlatform(
      GamingPlatform? platform, GamingPlatformEnum platformEnum) {
    return _copyWith(platform: platform, gamingPlatformEnum: platformEnum);
  }

  VideoGameModel resetImageUrl() {
    return VideoGameModel(
      title: title,
      description: description,
      platform: platform,
      ean: ean,
      imageUrl: null,
      uuid: uuid,
      imageBase64: null,
      gamingPlatformEnum: gamingPlatformEnum,
      numberOfCopiesOwned: numberOfCopiesOwned,
    );
  }
}

@HiveType(typeId: 5)
class GamingPlatform {
  @HiveField(1)
  final String twitchiId;
  @HiveField(2)
  final String name;
  @HiveField(3)
  final List<String> commonNames;

  GamingPlatform(
      {required this.commonNames, required this.twitchiId, required this.name});

  Map<String, dynamic> toJson() {
    return {
      'twitchiId': twitchiId,
      'name': name,
      'commonNames': commonNames,
    };
  }

  factory GamingPlatform.fromJson(Map<String, dynamic> map) {
    return GamingPlatform(
      twitchiId: map['twitchiId'] as String,
      name: map['name'] as String,
      commonNames: map['commonNames'] as List<String>,
    );
  }
}

class GaminPlatformsBreakdown {
  final List<GamingPlatform> _platforms;

  GaminPlatformsBreakdown({required List<GamingPlatform> platforms})
      : _platforms = platforms;

  List<GamingPlatform> getByPlatform(GamingPlatformEnum platform) =>
      switch (platform) {
        GamingPlatformEnum.playstation => ps,
        GamingPlatformEnum.sega => segas,
        GamingPlatformEnum.xbox => xboxes,
        GamingPlatformEnum.nintendo => nintendos,
        // TODO: Handle this case.
        GamingPlatformEnum.unknown => throw UnimplementedError(),
      };

  GamingPlatformEnum getFromPlatform(GamingPlatform item) {
    if (ps.contains(item)) {
      return GamingPlatformEnum.playstation;
    }
    if (nintendos.contains(item)) {
      return GamingPlatformEnum.nintendo;
    }
    if (segas.contains(item)) {
      return GamingPlatformEnum.sega;
    }
    if (xboxes.contains(item)) {
      return GamingPlatformEnum.xbox;
    }
    return GamingPlatformEnum.unknown;
  }

  List<GamingPlatform> get all => _platforms;

  List<GamingPlatform> get ps => _platforms
      .where((item) => psKeywords.contains(item.name.toLowerCase()))
      .toList();

  List<GamingPlatform> get nintendos => _platforms
      .where((item) => nintendoKeywords.contains(item.name.toLowerCase()))
      .toList();

  List<GamingPlatform> get xboxes => _platforms
      .where((item) => xboxKeywords.contains(item.name.toLowerCase()))
      .toList();

  List<GamingPlatform> get segas => _platforms
      .where((item) => item.name.toLowerCase().contains("sega"))
      .toList();

  GamingPlatformEnum getPlatformEnumFromTitle(String? title, [Items? item]) {
    GamingPlatformEnum result = GamingPlatformEnum.unknown;

    for (var psKeyword in psKeywords) {
      if (title?.contains(psKeyword.pad()) ?? false) {
        result = GamingPlatformEnum.playstation;
      }
    }

    for (var nin in nintendoKeywords) {
      if (title?.contains(nin.pad()) ?? false) {
        result = GamingPlatformEnum.nintendo;
      }
    }

    for (var xbox in xboxKeywords) {
      if (title?.contains(xbox.pad()) ?? false) {
        result = GamingPlatformEnum.xbox;
      }
    }

    for (var s in ["sega"]) {
      if (title?.contains(s.pad()) ?? false) {
        result = GamingPlatformEnum.sega;
      }
    }

    if (result == GamingPlatformEnum.unknown) {
      result = _getPlatformEnumFromDescription(item?.description
          ?.removeNonAlphanumericButKeepSpaces()
          .toLowerCase());
    }

    return result;
  }

  GamingPlatformEnum _getPlatformEnumFromDescription(String? description) {
    GamingPlatformEnum result = GamingPlatformEnum.unknown;

    for (var psKeyword in psKeywords) {
      if (description?.contains(psKeyword.pad()) ?? false) {
        result = GamingPlatformEnum.playstation;
      }
    }

    for (var nin in nintendoKeywords) {
      if (description?.contains(nin.pad()) ?? false) {
        result = GamingPlatformEnum.nintendo;
      }
    }

    for (var xbox in xboxKeywords) {
      if (description?.contains(xbox.pad()) ?? false) {
        result = GamingPlatformEnum.xbox;
      }
    }

    for (var s in ["sega"]) {
      if (description?.contains(s.pad()) ?? false) {
        result = GamingPlatformEnum.sega;
      }
    }

    return result;
  }

  GamingPlatform? getPlatformFromTitle(String? title, [String? desc]) {
    GamingPlatform? dd;

    final List<GamingPlatform> availablePlatforms = ps
      ..addAll(nintendos)
      ..addAll(xboxes)
      ..addAll(segas);

    final List<(GamingPlatform, List<String>)> commons = availablePlatforms
        .map((GamingPlatform e) => (e, e.commonNames))
        .toList();

    for (var common in commons) {
      bool isPlatform =
          common.$2.any((String test) => title?.contains(test) ?? false) ||
              common.$2.any((String test) => desc?.contains(test) ?? false);
      if (isPlatform) dd = common.$1;
    }
    return dd;
  }
}

enum GamingPlatformEnum {
  playstation,
  sega,
  xbox,
  nintendo,
  unknown;

  const GamingPlatformEnum();

  String getLogoAsset() => switch (this) {
        GamingPlatformEnum.playstation =>
          "assets/platforms/playstation/ps_logo.png",
        GamingPlatformEnum.sega => "assets/platforms/sega/sega_logo.png",
        GamingPlatformEnum.xbox => "assets/platforms/xbox/xbox_logo.png",
        GamingPlatformEnum.nintendo =>
          "assets/platforms/nintendo/nintendo_logo_smaller.png",
        _ => "assets/platforms/unknown/unknown_game.jpg",
      };
}

class GamingPlatformEnumAdapter extends TypeAdapter<GamingPlatformEnum> {
  @override
  final typeId = 6;

  @override
  GamingPlatformEnum read(BinaryReader reader) {
    return GamingPlatformEnum.values[reader.read() as int];
  }

  @override
  void write(BinaryWriter writer, GamingPlatformEnum obj) {
    writer.write(obj.index);
  }
}

final xboxKeywords = [
  "xbox",
  "microsoft",
  "xbox360",
  "xbox 360",
  "xbox one",
  "series s",
  "series x",
  "xbox series x|s"
];

final nintendoKeywords = [
  "n64",
  "gameboy",
  "game boy",
  "game boy color",
  "nintendo",
  "nintendo switch",
  "super famicon",
  "famicon",
  "ngc",
  "gamecube",
  "nintendo gamecube",
  "nintendo entertainment system",
  "super nintendo entertainment system",
  "super nintendo",
  "nintendo 64",
  "nintendo 64dd",
  "game cube",
  "wii",
  "wii u",
  "game & watch",
  "nes",
  "nintendo ds",
  "nintendo dsi",
  "super nintendo entertainment system",
  "nintendo 3ds",
  "nes",
  "virtual boy",
  "ds",
  "3ds"
];

final psKeywords = [
  "vita",
  "playstation vita",
  "ps vita",
  "playstation",
  "playstation vr",
  "playstation vr2",
  "playstation 1",
  "playstation 2",
  "playstation 3",
  "playstation 4",
  "playstation 5",
  "ps1",
  "ps2",
  "ps3",
  "ps4",
  "psx",
  "ps5",
  "psp",
  "portable",
  "playstation portable",
];
